The logic description will contain what types i knows, and what fields it uses in what order.
Perhaps I will generate a source with that information.


Identifiable should be a separate aspect - in this way there is no special handling of
persistent entities: they simply have an Identifiable aspect. Then i should call it Persistent...


process package: later to be transformed to the runtime environment of entities,
now temporal environment for template based import. The aim is to create a callback-based
parsing process, later to be reused for any on-the-fly text parsing (syntax highlight, auto complete).
This way objects can't call each other, the call stack local variables must be replaced with
call context objects managed by this package. (the same applies later for the logic communication)



The source mark/rollback is wrong in the ProcessManager? Perhaps not: the EventSource is a more general
level than the processing template components



	// "EBNF defined in itself" {
	// syntax = [ title ] "{" { production } "}" [ comment ].
	// production = identifier "=" expression ( "." | ";" ) .
	// expression = term { "|" term } .
	// term = factor { factor } .
	// factor = identifier
	// | literal
	// | "[" expression "]"
	// | "(" expression ")"
	// | "{" expression "}" .
	// identifier = character { character } .
	// title = literal .
	// comment = literal .
	// literal = "'" character { character } "'"
	// | '"' character { character } '"' .
	// }
	
	
	
	
The next aim is to manage transaction: create temporal environment for the process, read current entity instances 
into the env and load over them; on success push the whole set back into the parent environment.
Write type etc. loader code in the init() functions; this will allow me to add new types.
Then I should transfer the DB connector from previous projects (both EAV and direct table).
Perhaps use templates for generating table scripts? Just for fun...


TODO: the Variant toString-fromString stuff: I must change the current method and create a proper,
configurable type-level and default formatting by field type.


LATE TODO: make the template/eval nodes to aspects, then remove the current, function-based communication
and create a correct, message-oriented solution; upgrade the process package to manage the real, aspect/logic
communication. I don't know enough yet to do this.
