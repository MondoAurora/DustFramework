The logic description will contain what types i knows, and what fields it uses in what order.
Perhaps I will generate a source with that information.


Returned to Entity/Aspect solution, found no better yet

Identifiable should be a separate aspect - in this way there is no special handling of
persistent entities: they simply have an Identifiable aspect. Then i should call it Persistent...

MAFKernelIdentifier: I can either use a Comparable id with TreeMaps OR a POJO wit instance management
The POJO seems to be better because then there is only one lookup at the creation, and existence
verification - later I have simple lookups in the HashMaps, on object unique instance ID I suppose 

vendor, domain, unit levels should also exist for the type management



json_bnf = """
object 
    { members } 
    {} 
members 
    string : value 
    members , string : value 
array 
    [ elements ]
    [] 
elements 
    value 
    elements , value 
value 
    string
    number
    object
    array
    true
    false
    null
"""



object : sequence( const("{"), ref("members"), const("}") )
members: repeat( ref("assignment"), ",")
assignment: sequence ( const("\""), eval(name), const("\""), const(":"), ref("value") )
array: sequence( const("["), ref("elements"), const("]") )
elements: repeat( ref("value"), ",")
value: eval()